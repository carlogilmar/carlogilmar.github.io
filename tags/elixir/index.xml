<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Elixir on Blog de Carlo Gilmar</title>
    <link>https://carlogilmar.github.io/tags/elixir/</link>
    <description>Recent content in Elixir on Blog de Carlo Gilmar</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 30 Mar 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://carlogilmar.github.io/tags/elixir/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Phoenix Simple App using Web Sockets</title>
      <link>https://carlogilmar.github.io/post/phoenix-sockets/</link>
      <pubDate>Fri, 30 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://carlogilmar.github.io/post/phoenix-sockets/</guid>
      <description>Hi! This post is for explain how to create a simple application with Phoenix and Elixir using Web Sockets.
Web Sockets  The Web Socket protocol based on TCP produce a bidirectional communication between client-server app, and it doesn‚Äôt need to use HTTP protocols.
 I created a phoenix project without ecto mix phx.new sampler --no-ecto for show a simple connection using web sockets.
Create the two-way communication For start, we have to create the communication through the web socket.</description>
    </item>
    
    <item>
      <title>Hello Elixir!</title>
      <link>https://carlogilmar.github.io/post/elixir_first/</link>
      <pubDate>Sat, 03 Mar 2018 09:13:50 -0600</pubDate>
      
      <guid>https://carlogilmar.github.io/post/elixir_first/</guid>
      <description>Recientemente he estado conociendo el lenguaje Elixir, un lenguaje que aprovecha la m√°quina virtual de Erlang, una plataforma conocida por soportar sistemas en baja latencia, sistemas distribuidos y tolerantes a fallas.
Para familiarizarme con el lenguaje he optado por resolver algunos ejercicios, un par de ellos son el Fizz Buzz y Guess My Number.
Fizz Buzz // My Fizzbuzz Solution in Swift for i in 1...50 { if i%5==0 &amp;amp;&amp;amp; i%3==0 { print(&amp;quot;Fizzbuzz üçª &amp;quot;) } else if i%5 == 0{ print(&amp;quot;Buzz&amp;quot;) } else if i%3==0{ print(&amp;quot;Fizz&amp;quot;) } else{ print(&amp;quot;\(i)&amp;quot;) } }  Normalmente suelo resolver este ejercicio con una iteraci√≥n, y el siempre confiable y √∫til IF, sin embargo, Elixir al ser un lenguaje funcional obliga a la implementaci√≥n de otra soluci√≥n bajo t√©rminos funcionales, aqu√≠ el primer reto.</description>
    </item>
    
  </channel>
</rss>