[{"content":"Site Configuration These settings are important for building a website using hugo. See All Configuration Settings for more details.\nSite title Site title. This value will become the content of \u0026lt;title\u0026gt; tag in html.\ntitle = \u0026quot;Monochrome\u0026quot;  Theme Set this value to the corresponding folder name of your theme. (located by default in /themes/THEMENAME/)\ntheme = \u0026quot;hugo-theme-monochrome\u0026quot;  Base URL Hostname (and path) to the root.\nbaseURL = \u0026quot;https://kaiiiz.github.io/hugo-theme-monochrome\u0026quot;  favicon Add favicon.ico to your site\u0026rsquo;s static folder.\nExternal library Disqus disqusShortname = \u0026quot;xxx\u0026quot;  Other settings checkout Disqus - Internal Templates for more details.\nGoogle Analytics googleAnalytics = \u0026quot;xxx\u0026quot;  ","permalink":"https://carlogilmar.xyz/configuration/site/","title":"Site Settings"},{"content":"Theme Configuration These values are inside your toml config file.\nNavbar title HTML is available.\n[params] navbar_title = \u0026quot;Monochrome\u0026quot; # default: site's `title`  Footer HTML is available.\n[params] footer = \u0026quot;Copyright © 2021 by kaiiiz\u0026quot; # default: None  Table of Contents TOC global settings.\n[params] enable_toc = true # default: true  Collapsible Menu Collapsible global settings.\n[params] enable_collapsible_toc = false # default: false enable_collapsible_changelogs = false # default: false  Navbar menu Monochrome uses built-in menu system supported by hugo itself. (Checkout document for more deatil.) By default, the menu called navbar is used to decide which item need to be rendered on the navbar.\nSo you can simply add the following code to your page front-matter, and the menu info will be handled by hugo out of the box. (simple method mentioned in document)\n--- menu: navbar ---  Also, weighted value is supported out of the box, you can explicit assign the weight of the navbar entry, hugo will first sort the menu using weight, if there has two entries shared the same weight, the default order will be applied.\n--- menu: navbar: weight: -99 ---  Navbar settings in config If you try to put entry that aren\u0026rsquo;t attached to a piece of content, or you want to organize your navbar into a single file, checkout Add Non-content Entries to a Menu or Configuration file of demo site and set these values in your toml settings file.\ntoml example:\n[[menu.navbar]] identifier = \u0026quot;about\u0026quot; name = \u0026quot;about\u0026quot; title = \u0026quot;about\u0026quot; url = \u0026quot;/about/\u0026quot; weight = 100 [[menu.navbar]] identifier = \u0026quot;series\u0026quot; name = \u0026quot;series\u0026quot; url = \u0026quot;/series/\u0026quot; weight = -100 [[menu.navbar]] identifier = \u0026quot;categories\u0026quot; name = \u0026quot;categories\u0026quot; url = \u0026quot;/categories/\u0026quot; weight = 80  yaml example:\nmenu: navbar: - identifier: about name: about title: about url: /about/ weight: 100 - identifier: series name: series url: /series/ weight: -100 - identifier: categories name: categories url: /categories/ weight: 80  List Layout [params] [params.list_layout] enable_group_by_year = true # default: true enable_show_date = true # default: true enable_pagination = false # default: false  External Library MathJax Use $ to create inline result, $$ to create block result.\n[params] enable_math = true # default: false  Zooming.js Zooming.js global setting.\n[params] enable_zooming_js = false # default: true  Site Search Add the following settings to config.toml:\n[outputs] home = [\u0026quot;HTML\u0026quot;, \u0026quot;RSS\u0026quot;, \u0026quot;JSON\u0026quot;]  Enable site search\n[params] enable_site_search = true # default: false  Syntax Highlighting Using Chroma (server-side) See Syntax Highlighting for more details.\n[param] [param.syntax_highlight] lib = \u0026quot;builtin\u0026quot; # \u0026quot;builtin\u0026quot; | \u0026quot;prism.js\u0026quot; (default: \u0026quot;builtin\u0026quot;) [param.syntax_highlight.builtin] enable_code_copy = true # default: true  Using Prism.js (client-side) Disable markup highlight feature\n[markup.highlight] codeFences = false lineNos = false  Enable Prism.js\n[param] [params.syntax_highlight] lib = \u0026quot;prism.js\u0026quot; # \u0026quot;builtin\u0026quot; | \u0026quot;prism.js\u0026quot; (default: \u0026quot;builtin\u0026quot;) [params.syntax_highlight.prism] enable_code_copy = true # default: true enable_line_no = true # default: true  SEO Author [params] author = \u0026quot;kaiiiz\u0026quot; # default: no author `meta` tag  Open Graph A flag to render open graph internal template. See Open Graph for additional settings.\n[params] enable_open_graph = false # default: true  Twitter Cards A flag to render open twitter cards template. See Twitter Cards for additional settings.\n[params] enable_twitter_cards = false # default: true  ","permalink":"https://carlogilmar.xyz/configuration/theme/","title":"Theme Settings"},{"content":"Page Settings These values are inside your page\u0026rsquo;s front-matter.\nLayout Monochrome support different types of layout. You can change the layout of section or regular page according to your needs. Checkout Layout for more details.\nNavbar title HTML is available.\n--- navbar_title: \u0026quot;Monochrome\u0026quot; ---   default: theme\u0026rsquo;s navbar_title\n Footer HTML is available.\n--- footer: \u0026quot;Copyright © 2021 by kaiiiz\u0026quot; ---   default: theme\u0026rsquo;s footer\n Site Search Hide the page from the search result.\nsearch_hidden: true   default: false\n Table of Contents --- toc: false ---   default: theme\u0026rsquo;s enable_toc\n Collapsible Table of Contents --- collapsible_toc: false ---   default: theme\u0026rsquo;s enable_collapsible_toc\n Changelogs --- changelogs: - tag: '20210623' description: - 'changelog example 1' - 'changelog example 2' - tag: '20210624' description: - 'changelog example 3' - 'changelog example 4' ---  tag and description both support markdown syntax.\n default: None\n Collapsible Changelogs --- collapsible_changelogs: false ---   default: theme\u0026rsquo;s enable_collapsible_changelogs\n External library MathJax --- math: false ---   default: theme\u0026rsquo;s enable_math\n Zooming.js --- zooming_js: false ---   default: theme\u0026rsquo;s enable_zooming_js\n Disqus --- disqus: false ---   default for post page: site\u0026rsquo;s disqusShortname\ndefault for other pages: false\n Google Analytics --- ga: false ---   default: site\u0026rsquo;s googleAnalytics\n Syntax Highlighting Chroma --- code_copy: false ---   default: theme\u0026rsquo;s enable_code_copy\n SEO Author --- author: \u0026quot;kaiiiz\u0026quot; ---   default: theme\u0026rsquo;s author\n Description --- description: \u0026quot;Configuration of hugo-theme-monochrome\u0026quot; ---   default: not generate description meta tag\n Keywords In page front-matter\n--- keywords: - hugo - hugo theme - hugo theme monochrome ---   default: not generate keywords meta tag\n Open Graph A flag to render open graph internal template. See Open Graph for additional settings.\n--- open_graph: false ---   default: theme\u0026rsquo;s enable_open_graph\n Twitter Cards A flag to render open twitter cards template. See Twitter Cards for additional settings.\n--- twitter_cards: false ---   default: theme\u0026rsquo;s enable_twitter_cards\n ","permalink":"https://carlogilmar.xyz/configuration/page/","title":"Page Settings"},{"content":"Bookcase layout is useful for creating another viewpoint of list contents.\n This layout can only be used on section page (_index.md).\n Configuration --- type: 'bookcase' ---   Specify type in front-matter will change the template lookup order.\n bookcase_list_sections List subsections.\n--- bookcase_list_sections: true ---   default: true\n bookcase_list_pages List pages.\n--- bookcase_list_pages: true ---   default: true\n Resouces Configuration These parameters are located in bookcase item\u0026rsquo;s resource. For example:\n. ├── books.md \u0026lt;- config is located in here! ├── category │ └── _index.md \u0026lt;- and here! └── _index.md \u0026lt;- your bookcase layout  bookcase_cover_src The cover image URL. URL must be relative to base URL. (without / prefix)\n Image ratio is 2:3 (width:height)\n For example:\nhttps://kaiiiz.github.io/hugo-theme-monochrome/thanks.jpg \\_____________________________________/\\________/ base URL bookcase_cover_src  --- bookcase_cover_src: 'thanks.jpg' ---   default: fallback to bookcase_cover_src_dark, if failed, image become empty\n bookcase_cover_src_dark The cover image URL for dark mode. URL must be relative to base URL. (without / prefix)\n Image ratio is 2:3 (width:height)\n For example:\nhttps://kaiiiz.github.io/hugo-theme-monochrome/thanks.jpg \\_____________________________________/\\________/ base URL bookcase_cover_src  --- bookcase_cover_src_dark: 'thanks.jpg' ---   default: fallback to bookcase_cover_src, if failed, image become empty\n weight --- weight: 3 ---   default: default order\n ","permalink":"https://carlogilmar.xyz/layouts/bookcase/docs/","title":"Bookcase Layout Document"},{"content":"Gallery Layout Document Gallery layout is useful for demonstrating pictures and its statistical data.\n This layout can be used on both section page and regular post.\n Configuration --- type: 'gallery' ---   Specify type in front-matter will change the template lookup order.\n gallery_resources Content resources. URL can be an absolute path (with / prefix, relative to base URL), or relative path (without /, relative to current path)\n Hugo will handle multilingual scenario out of the box\n For example:\nhttps://kaiiiz.github.io/hugo-theme-monochrome/about \\____________________________________/\\____/ base URL gallery_resources  --- gallery_resources: '/about' ---   default: error will occur in page\n Resouces Configuration These settings are under the resource specified in gallery_resources.\ntitle Title of image.\n--- title: 'Gallery' ---   default: no title\n gallery_title_link Link of the title.\n--- gallery_title_link: 'https://github.com/kaiiiz' ---   default: no title link\n gallery_img_src Image URL. URL must be relative to base URL. (without / prefix)\nFor example:\nhttps://kaiiiz.github.io/hugo-theme-monochrome/thanks.jpg \\_____________________________________/\\________/ base URL gallery_img_src  --- gallery_img_src: 'thanks.jpg' ---   default: no image\n gallery_img_link Link of the image.\n--- gallery_img_link: 'https://github.com/kaiiiz' ---   default: no image link\n gallery_img_caption Caption of the image. HTML is available.\n--- gallery_img_caption: '\u0026lt;span\u0026gt;Photo by \u0026lt;a href=\u0026quot;https://unsplash.com/@swimstaralex?utm_source=unsplash\u0026amp;amp;utm_medium=referral\u0026amp;amp;utm_content=creditCopyText\u0026quot;\u0026gt;Alexander Sinn\u0026lt;/a\u0026gt; on \u0026lt;a href=\u0026quot;https://unsplash.com/s/photos/thanks?utm_source=unsplash\u0026amp;amp;utm_medium=referral\u0026amp;amp;utm_content=creditCopyText\u0026quot;\u0026gt;Unsplash\u0026lt;/a\u0026gt;\u0026lt;/span\u0026gt;' ---   default: no figure caption under image\n gallery_statistic Statistic of the image. The format is:\n--- - key: key1 value: value1 - key: key2 value: value2 ---  key and value both support markdown syntax.\n default: no figure caption under image\n weight --- weight: 3 ---   default: default order\n Headless Bundle Hugo supports an amazing feature called Headless Bundle, which elegantly resolved the resouces publish issue.\nFor example, if you don\u0026rsquo;t want to publish the resouces of the gallery layout, you can create a leaf bundle and specified headless = true in index.md\u0026rsquo;s front-matter. These resources will only be used during rendering process. In other word, no file will be generated to /public folder.\nCheckout Headless Bundle for more details.\n","permalink":"https://carlogilmar.xyz/layouts/gallery/docs/","title":"Gallery Layout Document"},{"content":"Blank layout render only the content of _index.md, it\u0026rsquo;s useful for fully customizing your list layout.\n This layout can only be used on section page (_index.md).\n Configuration --- type: 'blank' ---   Specify type in front-matter will change the template lookup order.\n ","permalink":"https://carlogilmar.xyz/layouts/blank/docs/","title":"Blank Layout Document"},{"content":"List layout is the built-in section layout. Monochrome add options to adjust its behavior.\nConfiguration Group by year An option to control group setting.\ngroup_by_year: false   default: theme\u0026rsquo;s list_layout.enable_group_by_year\n Show date Show / Hide date right after the post entry.\nshow_date: false   default: theme\u0026rsquo;s list_layout.enable_show_date\n Pagination pagination: false   default: theme\u0026rsquo;s list_layout.enable_pagination\n ","permalink":"https://carlogilmar.xyz/layouts/list/docs/","title":"List Layout Document"},{"content":"Postcard layout show summary of regular posts, it\u0026rsquo;s useful for creating home page.\n This layout can only be used on list layout.\n Configuration --- type: 'postcard' ---   Specify type in front-matter will change the template lookup order.\n ","permalink":"https://carlogilmar.xyz/layouts/postcard/docs/","title":"Postcard Layout Document"},{"content":"Balloon Layout Document Balloon is useful for demonstrating information step-by-step.\n This layout can be used on both section page (_index.md) and regular post (xxx.md).\n Configuration --- type: 'balloon' ---   Specify type in front-matter will change the template lookup order.\n balloon_resources Content resources. URL can be an absolute path (with / prefix, relative to base URL), or relative path (without /, relative to current path)\n Hugo will handle multilingual scenario out of the box\n For example:\nhttps://kaiiiz.github.io/hugo-theme-monochrome/about \\____________________________________/\\____/ base URL balloon_resources  --- balloon_resources: \u0026quot;/about\u0026quot; ---   default: error will occur in page\n balloon_img_src Balloon head image URL. URL must be relative to base URL. (without / prefix)\nFor example:\nhttps://kaiiiz.github.io/hugo-theme-monochrome/thanks.jpg \\_____________________________________/\\________/ base URL balloon_img_src  --- balloon_img_src: 'thanks.jpg' ---   default: fallback to balloon_img_src_dark, if failed, image become dot\n balloon_img_src_dark Balloon head image URL for dark mode. URL must be relative to base URL. (without / prefix)\nFor example:\nhttps://kaiiiz.github.io/hugo-theme-monochrome/thanks.jpg \\_____________________________________/\\________/ base URL balloon_img_src  --- balloon_img_src_dark: 'thanks.jpg' ---   default: fallback to balloon_img_src, if failed, image become dot\n balloon_circle balloon head shape can be square or circle.\n--- balloon_circle: true ---   default: true\n Resouces Configuration These settings are under the resource specified in balloon_resources.\ntitle Title of content card.\n--- title: 'Story before hugo' ---   default: no title\n weight --- weight: 3 ---   default: default order\n Headless Bundle Hugo supports an amazing feature called Headless Bundle, which elegantly resolved the resouces publish issue.\nFor example, if you don\u0026rsquo;t want to publish the resouces of the balloon layout, you can create a leaf bundle and specified headless = true in index.md\u0026rsquo;s front-matter. These resources will only be used during rendering process. In other word, no file will be generated to /public folder.\nCheckout Headless Bundle for more details.\n","permalink":"https://carlogilmar.xyz/layouts/balloon/docs/","title":"Balloon Layout Document"},{"content":"The content below was generated for prepare a talk for the Elixir Meetup in CDMX 🇲🇽\nAll the drawings were drew my me.\nThe Phoenix Live Views is an open-source project created since last October, 2018. The core maintainers are Chris McCord, Jose Valim, Alex Garibay, Gary Rennie and Scott Newcomer. Join to the Elixir Community Slack!\nIn the next sections I\u0026rsquo;ll explain what is and how I understood that this works 😅.\nA live view A live view could be understood as a process, this process keep an state, and modify his state if an event happens. Keep an eye here.\nFeatures and use cases If you read the documentation you\u0026rsquo;ll see similar content illustrated here.\nA Live View:\n Use the Phoenix Channels, and it scales well vertically and horizontally The first rendered is by regular HTTP request Implements diff tracking Identify static and dynamic content React faster  Life Cycle When we are opening an url in the browser for show our Live View there happening many things:\n A regular HTTP Request is sent The assets are rendered The Live View provides a signed session data This session data is stored on the client When the client is connected it\u0026rsquo;s time to back to the server  Inside the Live View the mount/2 function is called, in this function we could assign the data for render our view render/1 function is called and it\u0026rsquo;ll send regular HTML to the client Our Live View will be completed and ready. If any event happens, the same flow will be called: 1) mount/2 and then render/1  A Live View Anatomy With this we could model the anatomy of a live view as:\n An Elixir Module It contains at least the follow functions:  mount/2 render/1   It\u0026rsquo;ll be render the content identified by the sigil ~L or by a template .leex(remember that a template needs a view for works)  Live View Setup For make the setup you\u0026rsquo;ll have to follow some steps: create your live view module, config a signing salt, create the socket live in your Endpoint, set as route in the Router or invoke in normal views, and finally connect the socket from the client in JS, you\u0026rsquo;ll use JavaScript for only this step.\nWhen I was learning how to implement Live Views I followed many tutorials availables in the web, and I decided to use my Learning Drive Development flow using my version control, so while I\u0026rsquo;m following the tutorial and I was doing the setup step by step I created a git commit per step, with this way I\u0026rsquo;ll be able to remember the steps and the code enough for every step. 😎\nAt the end of the day I write this commits:\n* 192c3cd Step 9 Import live css * 011d500 Step 8: Enable live reload in dev mode * 5907daa Step 7: Connecting the socket in app.js * f02fdaf Step 6: Adding JS live view dependency * c493485 Step 5 Adding websocket in endpoint * 196edd9 Step 4: Adding imports in main Web file * 979d855 Step 3: Adding plugs in router * 942aff2 Step 2 Adding signing salt and engine template * ecb8c8d Step 1: Adding live view dep * 124a1bd First commit If you want to follow this setup you have to clone my repo or see on GitHub and make a git show of every commit, or only see the commit content: GitHub Repository\nI learned this after read the documentation. I drew all the illustrations for understand better, this is my method for learn something, actually I opened an Issue on the official repo at GitHub for try to become this images as open source contribution.\nExploring the repository When I\u0026rsquo;m learning a new open source technology I learned to explore the repository, create a fork, and try to understand what\u0026rsquo;s happening there. With Elixir this practice is more funny because you have the IEx Shell! So I was very interested in discover how people as Jose Valim and Chris are creating elixir applications, so I decided to explore the git commit history and try to understand when and how the Live View project was developed. This experience is so valuable because with this way you\u0026rsquo;re understanding how the authors created a piece of software, and then you\u0026rsquo;re learning how they are writting software. And also using a tool as git you\u0026rsquo;re able to discover some behaviours and patterns in the way of how a project was developed based on his version control history.\nExploring the commit history I found something like this:\n* efb06a8 hace 9 meses Chris McCord Blur the focused input on form submits to ensure updates. Closes #6 * 40cd244 hace 9 meses Chris McCord Fix focus and click bugs * 631f379 hace 9 meses GitHub Fix typo in live_view.js * 2584eec hace 9 meses GitHub Fix typos in phoenix_live_view.ex docs * 2d16e59 hace 9 meses Chris McCord Fix keypress bug * 86ec0a1 hace 9 meses José Valim Remove unused deps from lock * 411ca1d hace 9 meses José Valim Add live_eex \u0026lt;-- 😯 * b362612 hace 9 meses Chris McCord Fix binding bug * fca9fdc hace 9 meses Chris McCord Set probable active element to fix safari focus issue * 24f0853 hace 9 meses Chris McCord Move to new socket change tracking * ae84de7 hace 9 meses Chris McCord Improve diff tests * 805edbf hace 9 meses Chris McCord Fix diff tests And the first commit of Jose Valim makes me feel curious about how much code contains? Well, for my surprise the first commit contains the Live View Engine and about 600 lines of code.\nThis file allow me to understand something about the process implemented by a Live View, which contains tree modules:\n Phoenix.LiveView.Comprehension Phoenix.LiveView.Rendered Phoenix.LiveView.Engine  The Phoenix.LiveView.Rendered is a struct which contains the dynamic and the static part of the view.\n%Phoenix.LiveView.Rendered{ static: [\u0026#34;foo\u0026#34;, \u0026#34;bar\u0026#34;, \u0026#34;baz\u0026#34;], dynamic: [\u0026#34;left\u0026#34;, \u0026#34;right\u0026#34;] } It\u0026rsquo;s important to mention that the Live View have another struct for consider a comprension:\n\u0026lt;%= for point \u0026lt;- @points do %\u0026gt; x: \u0026lt;%= point.x %\u0026gt; y: \u0026lt;%= point.y %\u0026gt; \u0026lt;% end  %\u0026gt; The engine will process this as a Phoenix.LiveView.Comprehension\n%Phoenix.LiveView.Comprehension{ static: [\u0026#34;\\nx: \u0026#34;, \u0026#34;\\ny: \u0026#34;, \u0026#34;\\n\u0026#34;], dynamics: [ [\u0026#34;1\u0026#34;, \u0026#34;2\u0026#34;], [\u0026#34;3\u0026#34;, \u0026#34;4\u0026#34;] ] } The Live View Engine is the module which generate this structs then to process a .leex file. This flow allow to identify which parts will be dynamic and sent to the client for update the view.\nIf we see how the Engine works, we have to execute the compiler from the iEX for Phoenix.LiveView.Engine.compile \u0026quot;path/to/your/file.leex\u0026quot;, 0, we can test simple templates:\nHola mundo! \u0026lt;%= name %\u0026gt; And then we\u0026rsquo;ll see a tuple with Elixir syntax tree which represents the template compiled and ready to update in the client, in some part of this you\u0026rsquo;ll see something like this:\n{:%, [], [ {:__aliases__, [alias: false], [:Phoenix, :LiveView, :Rendered]}, {:%{}, [], [ static: [\u0026#34;Hola mundo! \u0026#34;, \u0026#34;\\n\u0026#34;], dynamic: [{:arg0, [], Phoenix.LiveView.Engine}], fingerprint: 120129061871015969357813258734644514847 ]} ]} Client Live View This project contains some code wrote in Javascript, although you only have to connect the socket for implement a Live View, there are three goals:\n Store the session signed, and manage the socket connection Render and update the view Bind the events for connect with the server through events  You will see a div which contains the session:\n\u0026lt;div data-phx-session=\u0026#34;SFMyNTY.g3cFAluBC0buY7Iw....\u0026#34; data-phx-view=\u0026#34;CounterWeb.CounterLive\u0026#34; id=\u0026#34;phx-gR6+DLO3\u0026#34; class=\u0026#34;phx-connected\u0026#34;\u0026gt; If you see how the Live View are working, you have to open the HTML Elements tab in your browser and see how only the dynamic parts of the template are updating.\n For make this possible Live Views are using a project MorphDOM, a JS library for update the DOM without a Virtual DOM.\nElixir Meetup CDMX All of this content was created for share it in the local Elixir Meetup at CDMX 🇲🇽\n  ","permalink":"https://carlogilmar.xyz/posts/live_views/","title":"Phoenix Live Views"},{"content":"Recently I have the opportunity to give a conference in the Startup Week in Mexico City. So I decided talk about Internet of things, because I was learning this using an Arduino and a Raspberry Pi.\nDEMO Connect Everything! The project is create a simple web application for create distribuid music. I was inspired in the Launchpad App and the Smartphone Symphony.\nI planned make this using Phoenix Framework, and connect an Arduino for play the music.\nThe Arduino I use the arduino for built a circuit based on receipt and send signals using the serial port. This means that, for example, I send a message when I press a key from the membrane switch, or when the photo-resistance validate the light intensity.\nAnd when the circuit receives a signal, they could do something: turn on leds, etc. I used the Arduino IDE for test this circuit, for send and receive signals.\nThe Raspberry-Pi Although the Raspberry Pi have a GPIO, I think that is more convenient use with the Arduino, because It has more usability (analog pins, more digital pins). The greatest part about Raspberry is that you could have an entire SO!\nSo I used the Raspbian SO for get a Linux SO. When you have a Linux you know that impossible is nothing.\nElixir I decided to choose elixir for programming over the Raspberry Pi because I was learning elixir, and this could be a great opportunity for improve my skills using an embedded systems.\nInstalling Elixir Raspbian SO have a simple way to install elixir, although you will have the version 1.3 I used other package installer ASD for install the most recent version.\nASD GitHub Repository\nPhoenix App GenServer implementation for get a sound The web app has planned for assign a different sound per user. For this I used the Channels for create sockets connections and I created a simple gen server for get the sound.\ndefmodule Chatter.Director do use GenServer # The sounds @songs [ %{\u0026quot;song\u0026quot; =\u0026gt; \u0026quot;http://carlogilmar.me/uno.m4a\u0026quot;, \u0026quot;category\u0026quot; =\u0026gt; \u0026quot;A\u0026quot;}, %{\u0026quot;song\u0026quot; =\u0026gt; \u0026quot;http://carlogilmar.me/dos.m4a\u0026quot;, \u0026quot;category\u0026quot; =\u0026gt; \u0026quot;B\u0026quot;}, %{\u0026quot;song\u0026quot; =\u0026gt; \u0026quot;http://carlogilmar.me/tres.m4a\u0026quot;, \u0026quot;category\u0026quot; =\u0026gt; \u0026quot;C\u0026quot;}, %{\u0026quot;song\u0026quot; =\u0026gt; \u0026quot;http://carlogilmar.me/cuatro.m4a\u0026quot;, \u0026quot;category\u0026quot; =\u0026gt; \u0026quot;D\u0026quot;}, %{\u0026quot;song\u0026quot; =\u0026gt; \u0026quot;http://carlogilmar.me/cinco.m4a\u0026quot;, \u0026quot;category\u0026quot; =\u0026gt; \u0026quot;E\u0026quot;}, %{\u0026quot;song\u0026quot; =\u0026gt; \u0026quot;http://carlogilmar.me/seis.m4a\u0026quot;, \u0026quot;category\u0026quot; =\u0026gt; \u0026quot;F\u0026quot;}, %{\u0026quot;song\u0026quot; =\u0026gt; \u0026quot;http://carlogilmar.me/siete.m4a\u0026quot;, \u0026quot;category\u0026quot; =\u0026gt; \u0026quot;G\u0026quot;}, %{\u0026quot;song\u0026quot; =\u0026gt; \u0026quot;http://carlogilmar.me/ocho.m4a\u0026quot;, \u0026quot;category\u0026quot; =\u0026gt; \u0026quot;H\u0026quot;} ] def start_link() do GenServer.start_link(__MODULE__, [], [name: __MODULE__]) end # I have to call this function for get a sound def suscribe() do GenServer.call( __MODULE__, :suscribe) end def init(_) do # Start the counter in 0 for serve the first sound {:ok, {:counter, 0} } end def handle_call( :suscribe, _, {:counter, counter} ) do # I serve the song and update the counter { counter, song, next_counter } = suscribe_song( counter ) {:reply, {counter, song}, {:counter, next_counter}} end # The counter cannot be more greater than 7 def suscribe_song( 8 ) do [ first_song | _ ] = @songs { 0, first_song, 1 } end def suscribe_song( current_counter ) do song = Enum.at( @songs, current_counter) { current_counter, song, current_counter + 1 } end end  Getting a sound per user connected I used the channels because It has a function handle_join when somebody create a new connection, so it’s easy identify this moment.\n def join(\u0026quot;room:lobby\u0026quot;, _, socket) do Logger.info \u0026quot;:: Join to room:lobby ::\u0026quot;, ansi_color: :green { _, current_user} = Director.suscribe() # I get the sound and send to the client {:ok, current_user, socket} end  For know more about Sockets in Phoenix you could visit my last post\nClient side For play and stop music I implement the Howler JS library in the client side from Phoenix. When a user is getting connected, the app assign a sound.\nUsing the broadcast messaging I could send strings, and in the client side I play different actions:\n Start: Start to play every sound in every user connection Play: Put the volume in 1. Stop: Put the volume in 0. Reload: Reload the browser. Current Letter: Play only a sound.  NOTE: I have one trouble using Phoenix in the Raspberry Pi, that was installing Node JS. Connect the Arduino and the Raspberry Pi: Nerves UART So, at this point I have a simple circuit running on the Arduino, and a Phoenix Web App. The next step is connect both. For this purpose I used Nerves UART Projet.\nFor understand how it works, read the documentation is enough.\nNerves UART iex\u0026gt; Nerves.UART.enumerate %{\u0026quot;COM14\u0026quot; =\u0026gt; %{description: \u0026quot;USB Serial Port\u0026quot;, manufacturer: \u0026quot;FTDI\u0026quot;, product_id: 24577, vendor_id: 1027}, \u0026quot;COM5\u0026quot; =\u0026gt; %{description: \u0026quot;Prolific USB-to-Serial Comm Port\u0026quot;, manufacturer: \u0026quot;Prolific\u0026quot;, product_id: 8963, vendor_id: 1659}, \u0026quot;COM16\u0026quot; =\u0026gt; %{description: \u0026quot;Arduino Uno\u0026quot;, manufacturer: \u0026quot;Arduino LLC (www.arduino.cc)\u0026quot;, product_id: 67, vendor_id: 9025}} iex\u0026gt; {:ok, pid} = Nerves.UART.start_link {:ok, #PID\u0026lt;0.132.0\u0026gt;} iex\u0026gt; Nerves.UART.open(pid, \u0026quot;COM14\u0026quot;, speed: 115200, active: false) :ok iex\u0026gt; Nerves.UART.write(pid, \u0026quot;Hello there\\r\\n\u0026quot;) :ok iex\u0026gt; Nerves.UART.read(pid, 60000) {:ok, \u0026quot;Hi\u0026quot;}  Nerves UART help to build the communication bridge between the arduino and the elixir app.\nNOTE: I have some troubles connecting the arduino with my MacOS. So I tested it directly in the raspberry pi and It works. So, the interesting part about this was implement the UART with the Phoenix app. For this I implemented a GenServer for get the port pidm.\nUART GenServer I created a GenServer for get the pidm from the opened port, so in the init function I open the port and keep the port as the state. With this pidm I could send messages to this port using the UART write function.\ndef init(_) do {:ok, uart_pid} = Nerves.UART.start_link port = Nerves.UART.open( uart_pid, \u0026quot;ttyACM0\u0026quot;, speed: 9600, active: false) Nerves.UART.configure(uart_pid, framing: {Nerves.UART.Framing.Line, separator: \u0026quot;\\r\\n\u0026quot;}) loop() {:ok, uart_pid} end def handle_call( :get_uart, _, state ) do # state is the uart_pid {:reply, state, state} end  Read the Serial Port with UART The main idea is send messages, as strings, from the arduino to the phoenix app. For make this possible I had to read the serial port for receive the signals, and send as broadcast to every socket connection.\nFor this I created a loop function for read every second the serial port, and send the signal as broadcast to the channels.\ndefp loop() do send self(), :loop end def handle_info(:loop, state) do {:ok, message_from_arduino} = Nerves.UART.read( state, 1000 ) RoomChannel.send_broadcast( message_from_arduino ) loop() {:noreply, state} end  With all of this I could connect everything and make the little demo. I built a simple device connecting all of this as a example of how IoT works.\nBonus: Telegram I used Telegram Bot API for connect a Telegram Bot for send messages to the sockets connections.\nFinally At the end of the day I want to use the Arduino for send signals to the web application built with Phoenix. Installing this framework in the Raspberry Pi is so great, because you could implement everything that you know, as an example, I connected Telegram as other device for send messages.\nThe web app is simple: create distribuited music melody based on 8 sounds from Launchpad.\nFeatures: Start  Every user has a different sound. When a user enter to the webapp, the arduino start to play the leds.  Photo-resistance  When turn-off the light, all devices start to play their sound. When turn-off the light, start to turn-on the leds. When turn-on the light, all devices stop their sound.  Membrance module  When touch a letter in the membrance module, all devices with this letter start to play their sound. When touch the play button in the membrance module, all devices start to play their sound. When touch the stop button in the membrance module, all devices stop their sound. When touch the reload button in the membrance module, all devices reload their connection and get a new letter.  Telegram  Send a message for start to play all sounds, stop, reload, and play every sound.  Thanks for reading! Don\u0026rsquo;t forget see the demo!! DEMO ","permalink":"https://carlogilmar.xyz/posts/learning-iot/","title":"Learning IoT: First Steps with Elixir"},{"content":"Learning Swift Recently I have been studying about Swift. I think that the learning experience is a wonderful resource for other persons who are in the same situation, so I consider valuable talk about this. First Steps When I start to learn swift I decide to watch videos and demonstrations about how to use the Xcode for build iOS apps, but, for be honest, I couldn’t understand some things: optionals, constrains, auto layout… This was my first experience. So I decide start with basics.\nI considered that know and understand the language is important, and Swift is a language with a lot of features. The plan was know more about it, and then introduce me to iOS apps development.\nInstallation By default you have swift installed in you MacOs, but you can install Swift in a linux SO: Installing Swift Oficial Website\nMy first professional language is groovy, so was normal for me find some concepts in this new language. The first things that I found about swift were:\n Xcode for build iOS apps Playgrounds  But this aren’t the only tools!\nMeeting Swift in Command Line I think that use the command line is better for developer life, fortunately swift is a scripting language, and it have a REPL. I found it more useful in this part of my life instead of use only playgrounds, although this are visual and have a great visual debugger, also are slow in some cases.\nYou can write some like this:\nprint(\u0026quot;Hello World from this swift script! 😎\u0026quot;)  Save as hello.swift and run with swift hello.swift\nIf you have a lot of warnings in your REPL, you have to configure your Xcode Command Lines. Go to Xcode \u0026gt; Preferences \u0026gt; Command Line Tools and select your Xcode version\nAlso swift have a own package for build apps. Remember that swift is general-purpose programming language, so you can build web apps too using Vapor Swift Frameworks for example.\nThis package manager is useful in the command line:\n mkdir sample-app \u0026amp;\u0026amp; cd sample-app\n  swift package init\n  ~/D/sample-app \u0026gt;\u0026gt;\u0026gt; swift package init Creating library package: sample-app Creating Package.swift Creating README.md Creating .gitignore Creating Sources/ Creating Sources/sample-app/sample_app.swift Creating Tests/ Creating Tests/LinuxMain.swift Creating Tests/sample-appTests/ Creating Tests/sample-appTests/sample_appTests.swift Creating Tests/sample-appTests/XCTestManifests.swift  We could make the follow things:\n Test this project with swift package test Built this project with swift build Create the Xcode project for use it swift generate-xcodeproj Use the LLDB Debugger  A text editor for Swift You can use your own text editor! I use VIM in my day by day, and I’m in love because it’s a useful tool for me. So I decide to use it with this plugin for swift syntax Swift VIM Plugin.\nThe language The swift language is elegant. It’s a dynamic language, so it could be typed or inferred. Sometimes looks like C, and you can implement some programming approaches as structured, oriented programming and functional programming, have pattern matching, protocols extensions, generics, and more features.\nI found interesting make some like this:\nstruct Student{ var name: String var age: Int } struct ListOfSomething\u0026lt;T\u0026gt;{ var list:[T] = [] mutating func setList(elementList:[T]){ self.list = elementList } func countElements() -\u0026gt; Int{ return self.list.count } } // A list of students var student1 = Student(name: \u0026quot;carlo\u0026quot;, age: 20) var student2 = Student(name: \u0026quot;gilmar\u0026quot;, age: 21) var student3 = Student(name: \u0026quot;carlogilmar\u0026quot;, age: 22) var studentsList:[Student] = [student1, student2, student3] // A list of something of students var buffer = ListOfSomething\u0026lt;Student\u0026gt;() buffer.setList(elementList: studentsList) buffer.countElements()  My Resources for learn For understand this language I try to start with the basics, so I use the follow books for know more about swift:\n Mastering Swift 4 (Difficult:⭐️ /5, Content:⭐️⭐️⭐️⭐️/5) Swift Data Structure and Algorithms  (Difficult:⭐️⭐️⭐️ /5, Content:⭐️⭐️⭐️⭐️/5) Classic Computer Science Problems in Swift (Difficult:⭐️⭐️⭐️⭐️ /5, Content:⭐️⭐️⭐️⭐️/5)  Now, I’m learning about iOS development, and I found some interesting resources:\n Let’s Build That App Site Brian Voong  help us to understand easily how to build an iOS application without storyboards, and talk about some tips, he have a lot of videos for learn and learn! Swift by Sundell Blog and Podcast John Sundell write about swift, and he have a lot of content about testing! The Learn Swift Podcast Consult Podcast David Kopec  talk about interesting things about swift!  This is my learning experience as beginner learning Swift. I hope to help you with start you own way of learn.\nThanks for read it! ","permalink":"https://carlogilmar.xyz/posts/learning-swift/","title":"Learning Swift"},{"content":"This blog post is a response to Ember’s 2018 Roadmap: A Call for Blog Posts Last November 2017 I had to build an application for make exams to evaluate teachers from a popular university. In the beginning this project was considered only for one person (me), so we decide learn Ember JS for this project.\nThe Beginning My previous experiences making front-end projects was using simple javascript and coffee script. I used to implement libraries as Handlebars, Director, Moment, SockJS, etc.\nLike other learning experiences, I started to make some exercises for understand the basics concepts. But in this case this experience was chaotic, because it resulted difficult for me follow a concept guide.\nI tried to read the most popular books, and I found some difficulties for understand a basic knowledge about it.\nI think that this happen because there isn’t a deep explain about Ember. Five months later this experience I could say that Ember is hard for understand, instead of other javascript frameworks.\nLoving Ember After this complications I could understand how to build an application using Ember and it results awesome.\nI think that Javascript is a complicated language, there is a lot of frameworks and transpilers. I see EmberJS as a patch for Javascript, because it make the JS for build an application more easy.\nFor web apps, Ember implements a great ecosystem based on many concepts and helped by a command line cli.\nAlthough learning Ember is hard at the beginning, when you understand it, you can work very quickly. With this framework you could have: quick development, reusability, modularity, and maintenance. But first you have to understand the basics. Learning Ember I made this visual recording for explain the most basic flow for start to learn ember as a novice.\nLearning Ember Concepts: 1. Ember Cli\n2. Templates and Handlebars\n3. Routing: model and actions\n4. Models\n5. Request: adapter and serializers\n6. Ember Addons\n7. Ember Mirage\n8. Components\n9. Controllers\nLearning this concepts I could develop an application for my job, so I can say that this are the basics concepts, and obviously there are more features for extend the use of ember. (I’m preparing a workshop with this agenda)\nI would like to know more about Ember When I was developing my app with Ember I had some questions about how to do something with this framework, and why this framework have this things.\n I see that when Ember lost the connection with the server side, the app is freeze, I don’t know if ember can manage this. Testing: I would like to know more about this topic, because I can’t understand why is more useful make testing with ember, it results easy work without this. Javascript have a lot of libraries, so, I would like to know how to implement in a Add-on using Components. When I implemented the minify I see that the hot reload becomes slow. I used the Ember Inspector, but I couldn’t understand how to use it. The controllers and the components are too similar, but I didn’t understand what was the main difference, I didn’t found some case for use a controller. I can’t found enough content for understand the serializers and adapters. I could only know the basics about it. Probably the worst thing about using Ember was the file structure. When you have a lot of routes and nested routes results difficult navigate through the project structure. The most difficult part was understand how to create a UI flow through the templates for create an application. I think that the environment ecosystem in important, so it could be great know more about how to install plugins for our text-editors, enable the ember syntax, autocomplete syntax, handlebars highlight. I use VIM as my text editor so I have to find what plugins improve my development environment.  Thanks for reading! Of course this is the opinion from a novice with 5 months using Ember. This is my opinion for start to learn Ember and my main questions about it.\n","permalink":"https://carlogilmar.xyz/posts/ember-call/","title":"Ember 2018 Roadmap: A call for blog post"},{"content":"Learning Puppet Hi! Recently I was reviewing two courses about Jenkins, so I had to use Vagrant for configure my environment, also I used other tools as Puppet.\nIn the developer day is very common configure linux servers for a lot of things: install a Jenkins, prepare the deploy environments, etc… Well, Puppet can help us to configure this servers, as a improve script shell. In this post I’m going to talk about the first steps for use Puppet.\n I recommend start to learning using Vagrant for create virtual machines ( By default Vagrant machines have installed an old Puppet version), you can know more in the Making Devs Blog: Creating virtual machines with Vagrant · Blog de Making Devs\n Benefits of use Puppet for configure servers  Keeping the configuration synchronized Repeating changes across many servers Self-updating documentation Version Control  Puppet is a great tool for make this, instead of use manual configuration, shell scripts (fragile, hard to maintain, very specific), or use container as Docker (require more configuration management).\nPuppet is more! Puppet is a language and an engine for applies configuration and managements.\nInstalling Puppet The most easy way for install puppet is download the TAR version here and run the ruby script.\nFor install Puppet 5.5.0 in ubuntu:\n$ wget http://downloads.puppetlabs.com/puppet/puppet-5.5.0.tar.gz $ tar -xzf puppet-5.5.0.tar.gz $ cd puppet-5.5.0/ $ sudo ./install.rb $ puppet --version 5.5.0  Starting With Puppet Puppet can manage three basic resource types:\n Package: for install software. File: for deploy configuration files. Service: for runs software itself.  I’m going to create my hello world example. For this I created the follow script:\nhello-world.pp\nfile { '/tmp/hello.txt': ensure =\u0026gt; file, content =\u0026gt; \u0026quot;hello, world Vagrant with Puppet!!!\\n\u0026quot;, }  For run this in the empty server:\n sudo puppet apply hello-world.pp\n vagrant@vagrant-ubuntu-trusty-64:~$ sudo puppet apply puppet1.pp Warning: Could not retrieve fact fqdn Notice: Compiled catalog for vagrant-ubuntu-trusty-64 in environment production in 0.05 seconds Notice: /Stage[main]/Main/File[/tmp/hello.txt]/ensure: defined content as '{md5}4f4e8edd5c7cd9dc6c2d3aaca1baf2c1' Notice: Finished catalog run in 0.01 seconds vagrant@vagrant-ubuntu-trusty-64:~$ cat /tmp/hello.txt hello, world Vagrant with Puppet!!!  The term File is a puppet declaration, ensure is for specify the resource type, and content is an attribute for set the content in the file.\nInstall Packages We can create a puppet script for install packages, it’s very easy:\npackage.pp\npackage { 'fish': ensure =\u0026gt; installed, }  vagrant@vagrant-ubuntu-trusty-64:~$ sudo puppet apply package.pp Warning: Could not retrieve fact fqdn Notice: Compiled catalog for vagrant-ubuntu-trusty-64 in environment production in 0.09 seconds Notice: /Stage[main]/Main/Package[fish]/ensure: ensure changed 'purged' to 'present' Notice: Finished catalog run in 7.97 seconds  Running Services We can start services too:\npuppet3.pp\nservice { 'jenkins': ensure =\u0026gt; running, enable =\u0026gt; true, }  vagrant@vagrant-ubuntu-trusty-64 ~\u0026gt; sudo puppet apply service.pp Warning: Could not retrieve fact fqdn Notice: Compiled catalog for vagrant-ubuntu-trusty-64 in environment production in 0.06 seconds Notice: Finished catalog run in 0.06 seconds  Resources for learn more:  Infrastructure as Code (IAC) Cookbook | PACKT Books Puppet 5 Beginner’s Guide - Third Edition | PACKT Books  Thanks for reading! This are the basic uses with this tool. I hope write more about this.\n","permalink":"https://carlogilmar.xyz/posts/learning-puppet/","title":"Learning Puppet"},{"content":"In the last post Learning Ember I talk about how to start with Ember.\nNow, after nights studying Ember I think that learning this framework is difficult because it require think first in Ember Concepts.\nAfter nights studying Ember I can say that learning this framework is difficult because you have to think first in their main concepts, and if you have some experience with other frameworks or transpilers ( coffee script, typescript, elm) probably you will be confused.\n In my opinion Javascript is hard and difficult, so, it needs frameworks for be more efficient and simple. Frameworks as Angular JS are good for start to create applications easily and faster, so, why Ember is a special framework?\n My main recommendation for persons who are learning Ember is start with understand the main concepts, and then, try to think how to create an application in this terms.\nThis are for me the main concepts that you have to understand: The Main View Please think always that Ember use conventions. This is so important for understand how Ember render a view. It uses Handlebars, so it could be good understand this first, although you can review the ember documentation about it, this will be enough.\nWhen you create an app:\n ember new example-app\n You could see that it will create a file app/templates/application.hbs, the templates are Handlebars Files in app/templates directory.\nThe application.hbsare an important file.\nThis is the main view that render all in the app/index.html. The application file contains the tag {{outlet}}. This refers where will be render other views.\n By default ember put a welcome view in application\n Basic Routing Probably the main file for explore an Ember App is the app/router.js, this file contains all routes.\nFor create a route we can use the Ember Cli\n ember generate route page1\n And this are going to generate three files: a JS file, a HBS file, and a test JS file. This is because the route is the main ember unit. Every Ember Application would be created using routes.\nRender Views All routes created by us will start in the application view (the father view), and this routes will be render into the application view.\n If we go to localhost:4200 we will see only the application view. But if we go to localhost:4200/page1 we will see the application view and the page1 route view.\n We can use the handlebars tag for link views:\n {{# link-to ‘view-name’}} Go to link{{#link-to}}  Hello World Example application.hbs\n\u0026lt;h1\u0026gt; Hi I'am the application View! \u0026lt;/h1\u0026gt; \u0026lt;br\u0026gt; {{#link-to 'page1'}} Page1 View {{/link-to}} {{outlet}}  page1.hbs\n\u0026lt;h3\u0026gt; I'm the page1 route \u0026lt;/h3\u0026gt; \u0026lt;br\u0026gt; {{#link-to 'application'}} Return {{/link-to}}  We can create more with the templates and routes, but this is a basic example about it, and I think that this would be clear for understand this Framework.\nI hope write more about Ember.\nThanks for reading! ","permalink":"https://carlogilmar.xyz/posts/ember-first/","title":"Ember JS First Steps"},{"content":"Recently, I reviewed a video course from Packt Publishing: “Effective Jenkins: Improving Quality in the Delivery Pipeline with Jenkins”\n Thanks to Packt Publishing for this opportunity, and thanks to Dwayne D\u0026rsquo;Souza for the collaboration!  So, I want to talk about the content of this course.\nBefore to Start This course is for people who know the basics about Jenkins. If you don’t, I would recommend learning about this from their previous courses:\n  Effective Jenkins: Getting Started with Continuous Integration: https://www.packtpub.com/networking-and-servers/effective-jenkins-getting-started-continuous-integration-video\n  Effective Jenkins: Continuous Delivery with Jenkins Pipeline: https://www.packtpub.com/networking-and-servers/effective-jenkins-continuous-delivery-jenkins-pipeline-video).\n  I would also suggest learning Vagrant as an added advantage.\nBefore you start with this course, you will need to know how to install Jenkins and configure it for the first time.\n As an extensible automation server, Jenkins can be used as a simple CI server or turned into the continuous delivery hub for any project.\n The Course This course, by Rodrigo Zacheu Russo, ​has four main topics. In every topic you will learn how to improve a tool as Jenkins.\nHere is a picture I drew for the main topics:\nImplementing an Acceptance Stage You will learn about testing! In this section, you are going to run tests! This chapter teaches you how to improve your quality gate using Jenkins.\nBranching Strategy Have you ever heard about Feature Branch? No? This chapter talks about it, and how to use Git for implements Git flows for use, in the Jenkins pipeline.\nAutomating Database Scripts As a developer, you have to make Database Migration for version control over the database, you will learn how to make this using Flyway and Jenkins.\nAutomating Pull Request You can automate your pull request by making a connection with GitHub and Jenkins.\nConclusion This course goes further than just the use of Jenkins. You will learn four concepts, and you will apply them in an exercise. This course is so great for people who know Jenkins and for novices as well.\nThanks for reading! ","permalink":"https://carlogilmar.xyz/posts/effectivejenkins/","title":"PacktPub Review: Effective Jenkins"},{"content":"Follow with learning more about Ember Js as our JS framework, I have to talk about my learning experience.\nWhen I was searching about Ember I found a lot of resources: posts, books, videos, courses and more. Everything looks good, until I had to start my first projects.\nBefore to start  I think that is good to know the context about it. Ember JS was born as a fork from SproutCore Framework. Apple was a contributor and develop his web application iWork (iCloud begins) with this framework. Ember Js born from SproutCore 2.0, by Yehuda Katz, a member of the jQuery, Ruby on Rails and SproutCore core teams.\n  Apple Music and LinkedIn are two applications developed with Ember JS.\n The Installation and the Development Environment For install the most recent version, you will need:\n Git Node / NPM (most recent LTS) Watchman (optional)  If you have this, you could type the following command for install ember:\n npm install -g ember-cli@3.0\n I’m in love with VIM, so I have to install plugins for ES6 and Handlebars.\nBut if you are using Sublime Text, I recommend install plugins for Handlebars and Ember, and there are other great plugins for other text editor, as VSCode.\nI recommend use Google Chrome for develop and install the Ember Inspector Extension.\nEmber JS Framework The framework contains the following core libraries\nThe ember ecosystem contains:\nHello World! We are going to use the Ember Cli for create a simple application\n ember new hello-world\n And you can see you first application with:\n ember serve\n This generate a project with the Ember Structure Folder.\nAlthough Ember has a lot of things created by default, I recommend go step by step.\nMaybe Ember could be hard to learn. But I recommend understand the most important concepts in Ember, and just think how to develop your application in this terms. For the beginning I recommend understand the most basics things: the routes and the templates. I hope write about this in other post.\nThanks for read! ","permalink":"https://carlogilmar.xyz/posts/learning-ember/","title":"Learning Ember JS"},{"content":"In the last days I have been learning about Process in Elixir. After doing some exercises and understand some things about it, I can explain how to create a simple example about process.\nThe Process Work with process in Elixir is so common, so, it’s important know how to use it. For create a process you can use spawn (which takes a function).\n The process structure is very simple: you have a mailbox, created within a function and by the word receive, and you can manage different messages and do something. When you create a process with spawn, you will get a Process ID, and also you can know if this process is alive.\n When you have a process alive, you can send it messages, for do this you only have to send with the process ID and a message (a data structure, a tuple, an atom…) .\nFor make this more clearly I will show how to create an example.\nPing Pong Example With a Process We have to create a simple function and create a receiver, within this, we are going to use the patter matching for receive different types of messages, in this case we are to receive two atoms: :pingand :pong. When we receive this, we will print a message.\ndefmodule Pingpong do def mailbox() do receive do {:ping} -\u0026gt; IO.puts \u0026quot; Ping !!\u0026quot; {:pong} -\u0026gt; IO.puts \u0026quot; Pong !!\u0026quot; end end end  If we run the iexshell we can create a process with this function and send it a messages for print the pingand pong:\nYou will see that only in the first message sent we can see the printed message\nProcess Alive This happens because the process created was killed after receive the first message. We can know if the process is alive in the iexshell:\nThe solution for avoid this is call the same function in the receiver, with this the process won’t be killed after receive a message.\ndef mailbox() do receive do {:ping} -\u0026gt; IO.puts \u0026quot; Ping !!\u0026quot; mailbox() {:pong} -\u0026gt; IO.puts \u0026quot; Pong !!\u0026quot; mailbox() end end  We are sending a message to a process alive. Now I want that this process send messages to the same process for do the ping-pong.\nPing Pong in the same Process My first try is that when the process receive a message, send the other message to the same process.\nFor this we only have to include the process ID in the tuple, and make a send with the other message.\nI’m going to print the process id in the function using self() .\n def mailbox() do IO.inspect self() receive do {:ping, pid} -\u0026gt; :timer.sleep(500) IO.puts \u0026quot; Ping !!\u0026quot; send(pid, {:pong, pid}) mailbox() {:pong, pid} -\u0026gt; :timer.sleep(500) IO.puts \u0026quot; Pong !!\u0026quot; send(pid, {:ping, pid}) mailbox() end end  Ping Pong with Two Process Now we have to create the ping-pong example with two process.\nFor do this we can create two process of the same function. Instead of get a single process id in the receiverwe can receive two process Id.\n def mailbox() do IO.inspect self() receive do {:ping, process1, process2} -\u0026gt; :timer.sleep(500) IO.puts \u0026quot; Ping !!\u0026quot; send(process2, {:pong, process1, process2}) mailbox() {:pong, process1, process2} -\u0026gt; :timer.sleep(500) IO.puts \u0026quot; Pong !!\u0026quot; send(process1, {:ping, process1, process2}) mailbox() end end  We can see which process are print the pingor pong message.\nWith simple exercise I understand how to create process and send messages It\u0026rsquo;s important because Elixir use it a lot! Thanks for reading! ","permalink":"https://carlogilmar.xyz/posts/elixir-process/","title":"Process in Elixir: A Simple Example"},{"content":"Hi! This post is for explain how to create a simple application with Phoenix and Elixir using Web Sockets.\nWeb Sockets  The Web Socket protocol based on TCP produce a bidirectional communication between client-server app, and it doesn’t need to use HTTP protocols.\n I created a phoenix project without ecto mix phx.new sampler --no-ecto for show a simple connection using web sockets.\nCreate the two-way communication For start, we have to create the communication through the web socket.\nWe have to make the connection to phoenix in every browser through channels (phoenix Implementation for web sockets).\nFor make this possible it’s necessary enable the Socket Library in assets/js/app.js , and you only have to uncomment the socket import.\nThen you have to join to the channel in assets/js/socket.js, we are going to print a console log with the response. For this case the channel name is “example”.\nsocket.connect() let channel = socket.channel(\u0026quot;example\u0026quot;, {}) channel.join() .receive(\u0026quot;ok\u0026quot;, resp =\u0026gt; { console.log(\u0026quot;Joined to Example Channel!!\u0026quot;, resp) }) .receive(\u0026quot;error\u0026quot;, resp =\u0026gt; { console.log(\u0026quot;Unable to join\u0026quot;, resp) })  Until here, we are make a connection request to “example” channel, but now we have to create this channel for complete this connection.\nWe have to create an elixir file with the channel in lib/sample_web/channels/example.socket.ex\nThe following function join allow the connection to “example” channel.\ndefmodule Siample.ExampleChannel do use Phoenix.Channel def join(\u0026quot;example\u0026quot;, payload, socket) do {:ok, socket} end end  The last step is update our user_socket.exadding the next line:\n## Channels channel \u0026quot;example\u0026quot;, SampleWeb.ExampleChannel  If we run the application and check the browser in localhost:4000 we will see the connection result in the console.\nSending Messages We have the connection created. So we can start to pass messages.\nIn the client side we are going to send a simple message to ”example:broadcast” channel. We need the channelobject (with the connection), and the channel direction example:broadcast and a message {message:\u0026quot;Hello Phoenix!\u0026quot;}\nsocket.js\nchannel.push('example:broadcast', {message:\u0026quot;Hello Phoenix!\u0026quot;})  In our example channel, we can create a function for response to this direction below to the join function.\nexample_socket.ex\n def handle_in(\u0026quot;example:broadcast\u0026quot;, payload, socket) do Logger.info \u0026quot;:: Example:Broadcast receive a message!::\u0026quot; {:noreply, socket} end  Sending Broadcast We can modify out last snippet for send a broadcast message to other channel example:alertadding: broadcast! socket, \u0026quot;example:alert\u0026quot;, payload\n def handle_in(\u0026quot;example:broadcast\u0026quot;, payload, socket) do Logger.info \u0026quot;:: Example:Broadcast receive a message!::\u0026quot; broadcast! socket, \u0026quot;example:alert\u0026quot;, payload {:noreply, socket} end  We are sending a message from elixir script to ”example:alert”, we can create this channel in the client side.\nIn our socket.jswe can add this below to the channel join connection:\nchannel.on(\u0026quot;example:alert\u0026quot;, msg =\u0026gt; { alert(\u0026quot;Can you see me?!!!!\u0026quot;) })  And this channel are going to receive all messages to ”example:alert” direction. For this case we are sending a broadcast message, so, we can open many browsers and wait the alert when the message are sended. ( this appears when you reload your application in localhost:4000)\nWith this you will have a simple application using sockets connection, join a channel in client side, sending messages and broadcast messages. This is very simple and useful, recently the Making Devs team develop a simple Type Racer team using this for pass messages and reload the sessions. You could see the complete example here: GitHub Repository Thanks for reading! ","permalink":"https://carlogilmar.xyz/posts/phoenix-sockets/","title":"Phoenix Simple App using Web Sockets"},{"content":"This is my first post in this year.\nRecently we have to develop a project about teacher training for a private university in Mexico City.\nThere are a lot of javascript frameworks and transpilers: Angular JS, Vue JS, Meteor, Aurelia JS, React JS, Ionic JS, Typescript, CoffeeScript, Elm, etc. We decided learn and use Ember JS for develop our frontend, and Spring/Groovy for the backend.\nAbout Ember Js  Ember is a JavaScript front-end framework designed to help you build websites with rich and complex user interactions. It does so by providing developers both with many features that are essential to manage complexity in modern web applications, as well as an integrated development toolkit that enables rapid iteration.\n Until now, I had has a little experience using Coffee Script and I could test a little of Angular. But now I’m in love with Ember, because I found more useful and interesting for build frontend apps, and their standards and conventions are so cool. In this post I’going to explore the basics about ember. And then I will release many post about more content.\nPhilosophy   Write less code\n  Use web standards and common idioms\n  Built for productivity and ergonomics\n  Constantly growing and improving\n  Friendly API\n  Build with Ember is like this\u0026hellip; You have a complete blank canvas for build your frontend app \u0026hellip; add few routes and templates\u0026hellip; Ember Core Libraries This framework had many libraries for extend his features.\nFramework Libraries:\n  Framework Ember JS\n  Data Persistence Ember Data\n  Toolchain Ember Cli\n  Helper Libraries\n  Batched Queue Backburner.js\n  URL Handling Route-recognizer.js\n  Routing Router.js\n  Promises Rsvp.js\n  Template Engine handlebars\n  Asset Pipeline Broccoli.js\n  Ember App Toolbox You can install Ember with npm, and then you can create a simple app with the ember cli:\n npm install -g ember-cli\n  ember new my-first-app\n The project structure contains the following directories:\n App: Application main source code Config Configuration and enviroments Public Assets (omg, fonts) Tests Vendor Dependencies that aren’t manage by npm. ember-cli-build How ember should build your app. dist Deployable assets  Anatomy of an Ember App Folder The app folder contains the main source code for build the app. This folder has the following structure:\n app/templates app/routes app/components app/helpers app/models app/styles app/services app/controllers app/adapters app/serializers app/app.js app/router.js app/index.html  My Recommendations for Learning I had to search a lot of material for learn Ember Js. Although there are many resources, I recommended the following material for a beginner:\n(Book) ROCK AND ROLL WITH EMBER JS Rock and Roll with Ember.js It’s a great book wrote by Balint Erdi (@baaz) where you can learn how to build an app. I consider this book as the best resource for start learning Ember Js, because It contains more core concepts, and this could help you to understand easy.\n(Book) The Pragmatic Programmers DELIVER AUDACIOUS WEB APPS WITH EMBER 2 Matthew White Deliver Audacious Web Apps with Ember 2 It’s other book for start to understand the framework, although maybe you will need to know some basic concepts for understand more fast the chapters.\n(Video and Book) Packt Pub EMBER.JS SOLUTIONS and EMBER.JS COOKBOOK Ember.js Solutions are videos about Ember.js, where you can watch the main concepts. I think that this is very useful when you already understand the main concepts.\n(Course) Frontend Masters EMBER 2.X Mike North Ember 2.x it’s a complete course about Ember.js, probably is the best material for start to learn ember. I recommended this course for beginners.\n","permalink":"https://carlogilmar.xyz/posts/emberjs/","title":"Hello Ember Js"},{"content":"Fibonacci Sequence With Swift 4.0 One of the firsts examples is the Fibonacci Sequence, although It’s a common programming problem, also It’s a curious problem for be solve with swift.\nThis is a sequence of numbers, which start in the third element as the sum of the previous two numbers. The next number is the sum of the previous two numbers too.\n 0, 1, (0+1), (1 + (0+1))\n  0, 1, 1, 2, 3, 5, 8, 13\n First Attempt One of the common solutions for this problem is a recursive solution.\nThis solution implement a recursive solution, if you want to know numbers less than 2, you will get the same number, but if you want to know other number more than 2, you have to start a recursive code. This is a very common solution, for example if you want to know the Fibonacci sequence for the number 4, you will call the function 9 times. Our tool for swift It’s going to help us to see this.\nUsing Memoization  “Memoization is a technique in which we store the results of computational tasks when they are completed”\n  KOPEC, “Classic Computer Science Problems in Swift: Essential techniques for practicing programmers MEAP V04.”, Manning, 2017.\n For this second solution we are using a Dictionary for save the firsts elements.\nUsing the number 4, if we want to know the 4th element in the sequence we only have to call the function only 3 times, because you are saving every element in the dictionary.\nUsing swift for solve the problem We have other option for find other solution.\nFor example in Swift you can write this\n /Pattern Matching/\n  let triple = (1, 2, 3)\n  let (x, y, z) = triple\n This solution is going to implement pattern matching. We have only two variables: last and next. They must be initialized with 0 and 1. So, the next step is create a loop with n times for iterate a tuple pattern matching.\nWe are using pattern matching, and we aren’t using recursive anymore. What many times are we call the same function? Instead of this, we are call a loop.\nOf course swift language have good tools for find new and simple solutions.\nThis is my first review of a part of the book Classic Computer Science Problems in Swift.\nThanks for reading!\n","permalink":"https://carlogilmar.xyz/posts/fibonacci/","title":"Fibonacci Sequence Review with Swift"},{"content":"Hey! I have been learning how to program swift because I want to write iOS apps.\nFor the first, I considered start with recognize my previous concepts in this new language for me, here is my \u0026ldquo;fizzbuzz\u0026rdquo; example:\n My guide to learn Swift and iOS are the follow videos and books:\n Swift Mastering The Core Concepts Building iOS 10 Applications with Swift iOS Programming The Big Nerd Ranch Guide 6Th Edition  My First App First, I need to understand this:\n How to create a single view iOS app. How to use the story board. How to put a buttons and labels. How to connect the view and the controller. How to make an event (push a button)  With these learnings, I was be able to create a basic iOS app.\nI created a simple view with many input text, labels and buttons. My first approach was make a println in console when pushed the button.\nFinding a REST Library I need find libraries for add to my iOS App, so I installed Cocoa Pods for this job.\ngem install cocoapods pod init  I will use a library for make REST request, so I found Alamofire.\nThe init command produces a Podfile, where I add my dependency:\nplatform :ios, '10.0' target 'HomeOfficeBotApp' do use_frameworks! pod \u0026quot;Alamofire\u0026quot; target 'HomeOfficeBotAppTests' do inherit! :search_paths end target 'HomeOfficeBotAppUITests' do inherit! :search_paths end end  Sending a message to slack Previously I wrote a post where I describe how to send messages to slack channel, you can read again here.\nFor send a post request with alamofire library, I need to write this:\n This was my first iOS app, although I have a lot of errors, I\u0026rsquo;m so excited because I can do a simple post request.\nThanks for reading!\n","permalink":"https://carlogilmar.xyz/posts/first-ios-app/","title":"First iOS App: Sending Messages to Slack"},{"content":"This was a post writted for Making Devs Blog. Recently we use the project Vertx for develop a project. Now I\u0026rsquo;m going to talk about the basic functionality.\n VertX is a tool-kit for building reactive applications on the JVM.\n It has many interesting features:\n Actor model based. It\u0026rsquo;s polyglot: you can use with Java, Groovy, Ruby, Scala, Ceylon, Javascript, and Kotlin.  Verticles For the beginning it\u0026rsquo;s important know that VertX has a nervous system called Event Bus, where you can write and run Verticles.\n Verticles are chunks of code that get deployed and run by Vert.x.\n In groovy, a verticle is called consumer.\nEvery verticle have an identifier, it\u0026rsquo;s only a String. It could be deployed on a script or a class, and into him you can receive a message from another part of the Event Bus, and send a reply.\nA Vertx Verticle:\n  Run on the event bus.\n  Have a address identifier (string)\n  Have a deployment ID (deployment identifier)\n It can receive a message and send a reply to the same message It can send message for other verticles  A simple groovy consumer:\n   Deploy Verticles The verticles can be deployed for be available on the event bus. When a verticle be deployed, it will be available on the Event Bus. You can deploy one consumer, or N instances of the same consumer.\nSending Messages You can send messages to verticle trough the verticle\u0026rsquo;s address. And it could be point to point, or a broadcast. With this simple concepts we can make a simple design using VertX verticles.\nPing-Pong simple example.\n This are only the basics concepts of VertX, because this toolkit is much bigger and useful.\nYou can learn more on VertX site Vertx Site\nVisit the [ VertX Google Group ] (https://groups.google.com/forum/#!forum/vertx)\nThanks for reading.\n@carlogilmar\n","permalink":"https://carlogilmar.xyz/posts/vertx-basic/","title":"Develop with VertX"},{"content":"Recently I have been searching projects for send messages to Slack Channel, and I found many purposes, but I had choose one, and I\u0026rsquo;ll show you how to use it. It\u0026rsquo;s very easy!\n  First, you have to go to your slack team, and click on \u0026ldquo;Apps \u0026amp; Integrations\u0026rdquo;.\n  Search and choose \u0026ldquo;Incoming WebHooks\u0026rdquo;.\n  Add Configuration: choose a channel, and Add Integration.\n  You will get a Webhook URL.\n  That\u0026rsquo;s all that we need, now we going to write the groovy script.\nUse the Project and Send Message with Groovy You can find the original project here github, and you can find the author Ashwanth Kumar by twitter.\n  Create a simple groovy script.\n  Add the project\n  @Grapes( @Grab(group='in.ashwanthkumar', module='slack-java-webhook', version='0.0.7') ) import in.ashwanthkumar.slack.webhook.Slack import in.ashwanthkumar.slack.webhook.SlackMessage   Add yout WebHook URL  def webhookUrl = \u0026quot;http:/webhokks.tag.something\u0026quot;   Add a simple method from Original Project, with:  new Slack(webhookUrl)// .icon(\u0026quot;‼️\u0026quot;) // Emoji .sendToChannel(\u0026quot;General\u0026quot;) //\u0026lt;-------------------Slack Channel .displayName(\u0026quot;Bot de Prueba\u0026quot;) \u0026lt;----------------Bot Name .push(new SlackMessage(\u0026quot;Salu2 \u0026quot;).bold(\u0026quot;Soy el Bot\u0026quot;));\u0026lt;---------Message    Run the script as groovy script.groovy\n  Check your message at Slack\n  Try this example, and Thanks @_ashwanthkumar ! GitHub Example\n","permalink":"https://carlogilmar.xyz/posts/slack-webhook/","title":"How to send Slack Messages with Groovy"},{"content":"Create a Simple Connection With Vertx, MongoDB and Groovy   You have to install VertX 3.3.3, Groovy, and Mongo DB.\n  Create a simple groovy script\n  Include the next imports\n  import io.vertx.groovy.core.Vertx import io.vertx.groovy.ext.mongo.MongoClient   Add the configuration for Mongo DB.  def config = Vertx.currentContext().config() def uri = config.mongo_uri if (uri == null) { uri = \u0026quot;mongodb://localhost:27017\u0026quot; } def db = config.mongo_db if (db == null) { db = \u0026quot;test\u0026quot;//\u0026lt;---------------database name } def mongoconfig = [ connection_string:uri, db_name:db ] def mongoClient = MongoClient.createShared(vertx, mongoconfig)   Add some data in the script.  def person1 = [ itemId:\u0026quot;12345\u0026quot;, name:\u0026quot;Carlo\u0026quot;, blog:\u0026quot;carlogilmar12@gmail.com\u0026quot;, twitter:\u0026quot;karlosins\u0026quot; ]   Use the mongo methods for save and find the data.  mongoClient.save(\u0026quot;people\u0026quot;, person1, { id -\u0026gt; println(\u0026quot;Inserted id: ${id.result()}\u0026quot;) mongoClient.find(\u0026quot;people\u0026quot;, [ itemId:\u0026quot;12345\u0026quot; ], { res -\u0026gt; println(\u0026quot;Name is ${res.result()[0].name}\u0026quot;) }) })   Please, run the script with vertx run script.groovy   You need to consult your Mongo Server  That\u0026rsquo;s a simple way for connect Mongo Db with VertX, thats the script complete: Script Complete\nREVIEW \u0026ldquo;How to connect VertX and Mongo with Groovy\u0026rdquo; 1.- Include imports. 2.- Add mongo configuration. 3.- Add some data. 4.- Use mongo methods. All at the same script. Run as: vertx run script.groovy  ","permalink":"https://carlogilmar.xyz/posts/vertx_mongo_web/","title":"Connect Vertx with MongoDB using Groovy"},{"content":"The idea of this Lean Book is to be a travel guide to Agile Methods, this publication is a resume of many interesting topics.\nI think It\u0026rsquo;s very helpful to have a guide like this.\nEvery topic has a little resume, and a drawing like this:\nI share with you my sketchnotes \u0026hellip;\n¡Visit LEAN PUB! You can find interesting books about agile topics\u0026hellip;\n","permalink":"https://carlogilmar.xyz/posts/agileplanet/","title":"Agile Planet ScketchNotes Review"},{"content":"Balloon layout can also be used in regular page.\nGo to list demo\n","permalink":"https://carlogilmar.xyz/layouts/balloon/demo/single/","title":"balloon layout single demo"},{"content":"Breadcrumbs Render breadcrumbs navigation\nUsage {{\u0026lt; breadcrumbs /\u0026gt;}}  Examples {{\u0026lt; breadcrumbs \u0026gt;}}  Home / Shortcodes / Breadcrumbs   ","permalink":"https://carlogilmar.xyz/shortcodes/breadcrumbs/","title":"Breadcrumbs"},{"content":"Changelog v1.0.1 (2022/04/02) Fixed  Fix img style issue, it should be max-width instead of width (#10)   v1.0.0 - First Major Release (2022/04/01) Added  Layout  New Layout: Postcard Layout, Blank Layout Support pagination for Postcard Layout and List Layout Enhance list layout date format. If current list layout is grouped by year, hide list item\u0026rsquo;s year. Redesign default home page layout using Postcard Layout Add sidebar for better navbar responsiveness on small screen   New Shortcode  emgithub: directly embed github source code like gist with Prism.js syntax highlighting   External Library  Optimize Prism.js integration  Add smooth transition to prevent line number jittering while page rendering Integrate Prism.js autoloader to prevent huge bundle file   Optimize Zooming.js integration  Background color is now dynamically changed based on current theme   Fuse.js integration  Support highlight matched text in search menu     New Theme Parameters  list_layout.enable_group_by_year list_layout.enable_show_date list_layout.enable_pagination syntax_highlight.lib syntax_highlight.builtin.enable_code_copy syntax_highlight.prism.enable_code_copy syntax_highlight.prism.enable_line_no   New Page Parameters  search_hidden: hide page from search index pagination: control pagination for List Layout    Changed  Change RSS content from full post to summary for smaller resource purpose Change all icons to feathericons Site search engine has been changed from flexsearch to fuse.js for better CJK language supports Parameter name has all been changed to snake_case for consistency Syntax highlight settings are now grouped by syntax_highlight svg-wrapper shortcode has been changed to icon  Removed  All javascript package dependencies are removed, Monochrome is now self-contained without the help of npm and become extremely easy to setup and modify. Remove list_posts property from list layout, this functionality has been replaced by Blank Layout   v0.9.2 (2022/02/25)  Fix: reimplement terms-cloud to prevent size overflow (max size: 1.6 rem)   v0.9.1 (2022/02/25)  Change: set terms-cloud max font size to 1.4 rem Fix: site search url from absLangURL to relLangURL   v0.9.0 (2022/01/31)  Improve: search implementation  hide the mismatch objects instead of removing it while searching widen the control range of search result   Improve: gallery layout\u0026rsquo;s key and value now support markdown syntax Improve: Zooming.js configuration  speed up animations setup transparent background   Change: for consistency, the names of the following parameters are changed:  page\u0026rsquo;s collapsibleTOC =\u0026gt; collapsible_toc page\u0026rsquo;s collapsibleChangelogs =\u0026gt; collapsible_changelogs   Change: font-size of html is changed from 18px to 16px Add: breadcrumbs shortcode Add: list layout properties group_by_year and show_date Fix: terms-cloud typo (#4)   v0.8.0 (2021/07/29)  Improve: flexsearch multilingual search capability Improve: widen the control range of navbar menu items Change: flexsearch can now search index pages Change: the post content in RSS is changed from summary to full text Add: collapsible TOC and Changelogs   v0.7.1 (2021/07/08)  Change: adjust the style of changelogs Fix: flexsearch search API issue   v0.7.0 (2021/06/24)  Bump dependencies version Add: changelogs property Add: support disqus for index page (turn off by default) Change: theme name from \u0026lsquo;Graytr\u0026rsquo; to \u0026lsquo;Monochrome\u0026rsquo; Change: improve navbar responsiveness Fix: widen the control range of navbar menu icon   v0.6.2 (2021/04/15)  Fix: google search console authentication failed if ga code not in \u0026lt;head\u0026gt; Fix: clipboard-polyfill/text dependency resolved issue   v0.6.1 (2021/02/17)  Fix: codepen shortcode id Change baseurl to example.com in exampleSite   v0.6.0 (2021/02/16)  Support MathJax Add shortcodes: jsfiddle, codepen, color-block, icon-group, terms-cloud Add option: list_posts in list layout Fix: not register touchend event   v0.5.0 (2021/02/15)  Support multilingual mode  Add i18n   Support Open Graph, Twitter Card Adjust svg-wrapper shortcode  Add some social icons: facebook, github, twitter, rss, mail   Support site search (powered by flexsearch) Disable unused features in tailwindcss (speedup building time) Reorganize parameters Remove default image to figure transformation, using built-in shortcode instead   v0.4.0 (2021/02/12)  Support dark mode  Add bookcase_cover_src_dark for bookcase layout Add balloon_img_src_dark for balloon layout Add shortcode: svg-wrapper   Prism.js integration (v1.23.0) Code copy feature for code block   v0.3.0 (2021/02/10)  Support nested navbar Implement default homepage layout Adjust the purpose of bookcase layout Remove catalog layout   v0.2.0 (2021/02/09)  A better responsive navbar Implement default taxonomy and term layout Adjust article styles   v0.1.0 (2021/02/08) Initial release.\n","permalink":"https://carlogilmar.xyz/changelog/","title":"Changelog"},{"content":"CodePen Embeded codepen to page.\nUsage {{\u0026lt; codepen id=\u0026quot;\u0026quot; \u0026gt;}}  Paramters:\n id: codepen id  Examples {{\u0026lt; codepen id=\u0026quot;Vwmpjba\u0026quot; \u0026gt;}}   ","permalink":"https://carlogilmar.xyz/shortcodes/codepen/","title":"CodePen"},{"content":"Color Block A block with color\nUsage {{\u0026lt; color-block style=\u0026quot;\u0026quot; \u0026gt;}} {{\u0026lt; /color-block \u0026gt;}}  Paramters:\n style: block style  success info warning error    Examples {{\u0026lt; color-block \u0026gt;}} hello world {{\u0026lt; /color-block \u0026gt;}}  hello world  {{\u0026lt; color-block style=\u0026quot;success\u0026quot; \u0026gt;}} hello world {{\u0026lt; /color-block \u0026gt;}}  hello world  {{\u0026lt; color-block style=\u0026quot;info\u0026quot; \u0026gt;}} hello world {{\u0026lt; /color-block \u0026gt;}}  hello world  {{\u0026lt; color-block style=\u0026quot;warning\u0026quot; \u0026gt;}} hello world {{\u0026lt; /color-block \u0026gt;}}  hello world  {{\u0026lt; color-block style=\u0026quot;error\u0026quot; \u0026gt;}} hello world {{\u0026lt; /color-block \u0026gt;}}  hello world  ","permalink":"https://carlogilmar.xyz/shortcodes/color-block/","title":"Color Block"},{"content":"Embed github Directly embed github source code like gist with Prism.js syntax highlight.\nUsage {{\u0026lt; emgithub target=\u0026quot;\u0026quot; lang=\u0026quot;\u0026quot; hl=\u0026quot;\u0026quot; tab_size=\u0026quot;\u0026quot; /\u0026gt;}}  Paramters:\n target (required): A valid github file url, for example:  https://github.com/torvalds/linux/blob/v5.4/README https://github.com/torvalds/linux/blob/v5.4/README#L1 https://github.com/torvalds/linux/blob/v5.4/README#L1-L7   lang (optional): Which language should use for syntax highlighting? text will be applied by default. hl (optional): Line highlight settings. For details, please refer Prism.js Line Highlight Plugin tab_size (optional): Default setting is 4 characters.  Examples {{\u0026lt; emgithub target=\u0026quot;https://github.com/torvalds/linux/blob/v5.4/README\u0026quot; /\u0026gt;}}      README view raw    {{\u0026lt; emgithub target=\u0026quot;https://github.com/torvalds/linux/blob/v5.4/arch/arm64/kernel/stacktrace.c#L171-L199\u0026quot; lang=c tab_size=8 hl=\u0026quot;172-173,192\u0026quot; /\u0026gt;}}      arch/arm64/kernel/stacktrace.c view raw    ","permalink":"https://carlogilmar.xyz/shortcodes/emgithub/","title":"Embed github"},{"content":"Icon Monochrome built-in icons.\nUsage {{\u0026lt; icon name=\u0026quot;\u0026quot; link=\u0026quot;\u0026quot; \u0026gt;}}  Paramters:\n link: Render link for icon name: Icon name  Available Built-in Icons Icons from Feather icons\n   name svg     earth         moon         sun         github         facebook         rss         twitter         mail          Examples {{\u0026lt; icon name=\u0026quot;github\u0026quot; link=\u0026quot;https://github.com/kaiiiz/hugo-theme-monochrome\u0026quot; \u0026gt;}}     ","permalink":"https://carlogilmar.xyz/shortcodes/icon/","title":"Icon"},{"content":"Icon Group Wrap icons with grid layout\nUsage {{\u0026lt; icon-group \u0026gt;}} {{\u0026lt; /icon-group \u0026gt;}}  Examples {{\u0026lt; icon-group \u0026gt;}} {{\u0026lt; icon name=\u0026quot;github\u0026quot; \u0026gt;}} {{\u0026lt; icon name=\u0026quot;rss\u0026quot; \u0026gt;}} {{\u0026lt; icon name=\u0026quot;twitter\u0026quot; \u0026gt;}} {{\u0026lt; /icon-group \u0026gt;}}               ","permalink":"https://carlogilmar.xyz/shortcodes/icon-group/","title":"Icon Group"},{"content":"JSFiddle Embeded jsfiddle to page.\nUsage {{\u0026lt; jsfiddle id=\u0026quot;\u0026quot; \u0026gt;}}  Paramters:\n id: jsfiddle id  Examples {{\u0026lt; jsfiddle id=\u0026quot;5byh90rz\u0026quot; \u0026gt;}}   ","permalink":"https://carlogilmar.xyz/shortcodes/jsfiddle/","title":"JSFiddle"},{"content":"This is a regular page in bookcase.\n","permalink":"https://carlogilmar.xyz/layouts/bookcase/demo/regular-page/","title":"Regular Page"},{"content":"This document shows a brief guide to setup hugo-theme-monochrome in your hugo project.\nQuick Start Install Hugo You need \u0026ldquo;extended\u0026rdquo; version of hugo to support SASS. Checkout Install Hugo for more details.\nTake Linux for example:\nsnap install hugo --channel=extended   The minimum hugo version that hugo-theme-monochrome required is 0.80.0\n Create a New Site hugo new site \u0026lt;project name\u0026gt;  Add a Theme cd \u0026lt;project name\u0026gt; git init git submodule add https://github.com/kaiiiz/hugo-theme-monochrome.git themes/hugo-theme-monochrome  Then add theme = \u0026quot;hugo-theme-monochrome\u0026quot; to your config.toml\nCustomize the Theme See Configuration.\nStart the Hugo server hugo server  Minify CSS and JS resources. The minifier of JavaScript here is powered by ESBuild.\nhugo server --environment production  Build static pages Generate files to /public folder, --minify option can minify other resouces (e.g. HTML/XML/JSON\u0026hellip;).\nSee Configure Minify to adjust the behavior of hugo minifier (powered by minify).\nhugo --environment production --minify  Deployment Push /public folder to your server. This site is built by using Github Action and Github Pages. The CI script is available here.\nRun exampleSite git clone https://github.com/kaiiiz/hugo-theme-monochrome cd hugo-theme-monochrome/exampleSite hugo --themesDir=../.. server  ","permalink":"https://carlogilmar.xyz/setup/","title":"Setup"},{"content":"Terms Cloud Render terms cloud, hugo supports tag and category terms by default, if you want to add your custom terms. Follow the instructions in the document.\nUsage {{\u0026lt; terms-cloud terms=\u0026quot;\u0026quot; /\u0026gt;}}  Paramters:\n terms: terms name  Examples {{\u0026lt; terms-cloud terms=\u0026quot;tags\u0026quot; \u0026gt;}}   community (1)   devops (1)   elixir (3)   ember (1)   index (1)   ios (1)   javascript (3)   phoenix (1)   programming (5)   ruby (1)   Slack (1)   swift (1)   vertx (2)     {{\u0026lt; terms-cloud terms=\u0026quot;series\u0026quot; \u0026gt;}}   ","permalink":"https://carlogilmar.xyz/shortcodes/terms-cloud/","title":"Terms Cloud"}]